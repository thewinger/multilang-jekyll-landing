@charset "UTF-8";
/* Settings: donde pondremos las variables que usaremos a lo largo del proyecto (variables) */
/* Tools: donde pondremos las funciones y los mixins */
/* Generic: Inter-project files (normalize, reset, etc.) */
/* Base: cualquier HTML tag, sin ninguna clase */
/* Objects: wrappers, layout, media… */
/* Components: Recognizable UI components */
/* Utilities: Cosas que sobreescriben al resto */
/**
 * CONTENTS
 *
 * SETTINGS - donde pondremos las variables que usaremos a lo largo del proyecto (variables)
 * Defaults.............Globally-available variables and config.
 * Responsive...........Responsive breakpoint settings.
 * Settings.............Import custom site settings.
 *
 * TOOLS - donde pondremos las funciones y los mixins
 * Functions............Reusable functions.
 * Mixins...............Useful mixins.
 * Responsive...........Mixin for declaring styles within media queries.
 *
 * GENERIC - Inter-project files (normalize, reset, etc.)
 * Normalize.css........A level playing field.
 * Box-sizing...........Better default `box-sizing`.
 * Reset................Additional resets to normalize.
 * Shared...............Apply shared styles for spacing rhythm.
 *
 * BASE - cualquier HTML tag, sin ninguna clase
 * Headings.............H1–H6 styles.
 * Paragraphs...........Lead paragraphs.
 * Lists................UL, LI styles.
 * Images...............Fluid images.
 * Page.................High-level page styles.
 *
 * OBJECTS - wrappers, layout, media…
 * Block................Image stacked on top of content.
 * Box..................Box off content.
 * Buttons..............Simple button object.
 * Flag.................Media object but with vertical alignment.
 * Layout...............Grid system.
 * List-Bare............Simple list with no indent or bullet points.
 * List-Block...........Lists with li as a block element.
 * List-Inline..........Lists with items displayed in one line.
 * List-UI..............Lists with a separator between elements.
 * Media................Image and text side by side.
 * Pack.................Packs children up horizontally to fit parent width.
 * Tables...............Simple table layouts.
 * Tabs.................Equal width nav tabs.
 *
 * COMPONENTS - Recognizable UI components
 * 
 * THEME
 *
 * TESTS
 *
 * TRUMPS - Cosas que sobreescriben al resto
 * Clearfix.............Clears content.
 * Print................Resets for print versions.
 * Spacing..............Margin and padding helper classes.
 * Responsive-Spacing...Responsive margin and padding helper classes.
 * Width................Width helper classes.
 * Responsive-Widths....Responsive width helper classes.
*/
/*!
 * inuitcss, by @csswizardry
 *
 * github.com/inuitcss | inuitcss.com
 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/*------------------------------------*\
    $ARROWS
\*------------------------------------*/
/**
 * It is a common design treatment to give an element a triangular points-out
 * arrow, we typically build these with CSS. These following classes allow us to
 * generate these arbitrarily with a mixin, `@arrow()`.
 */
/**
 * Forms the basis for any/all CSS arrows.
 */
/**
 * Define individual edges so we can combine what we need, when we need.
 */
/*------------------------------------*\
    #GENERIC
\*------------------------------------*/
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/*------------------------------------*\
    #BOX-SIZING
\*------------------------------------*/
/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

/*------------------------------------*\
    #RESET
\*------------------------------------*/
/**
 * As well as using normalize.css, it is often advantageous to remove all
 * margins from certain elements.
 */
body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0;
}

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help;
}

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none;
}

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid;
}

/*------------------------------------*\
    #SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p, address,
hr,
table,
fieldset, figure,
pre {
  margin-bottom: 24px;
  margin-bottom: 1.5rem;
}

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once,here.
 */
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem;
}

/*------------------------------------*\
    #BASE
\*------------------------------------*/
h1, h2, h3, h4, h5, h6 {
  font-family: 'Roboto Slab', serif;
  font-weight: 300;
}

main h2 {
  color: #16A085;
}

html {
  font-family: "Open Sans", sans-serif;
}

a {
  color: #16A085;
  text-decoration: none;
}
a:hover {
  color: #16A085;
}

/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/
/**
 * Headings 1–6.
 */
h1 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333;
}

h2 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6;
}

h3 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1;
}

h4 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2;
}

h5 {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
}

h6 {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
}

/*------------------------------------*\
    #PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger: en.wikipedia.org/wiki/Lede_(news)
 */
.lede {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333;
}

/*------------------------------------*\
    #LISTS
\*------------------------------------*/
/**
 * Remove extra vertical spacing when nesting lists.
 */
li > ul,
li > ol {
  margin-bottom: 0;
}

/*------------------------------------*\
    #IMAGES
\*------------------------------------*/
/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */
}

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
.gm-style img,
img[width],
img[height] {
  /* [2] */
  max-width: none;
}

/*------------------------------------*\
    #PAGE
\*------------------------------------*/
/**
 * High-, page-level styling.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [1] */
  background-color: #fff;
  color: #39403e;
  overflow-y: scroll;
  /* [2] */
  min-height: 100%;
  /* [3] */
  -webkit-text-size-adjust: 100%;
  /* [4] */
  -ms-text-size-adjust: 100%;
  /* [4] */
  -moz-osx-font-smoothing: grayscale;
  /* [5] */
  -webkit-font-smoothing: antialiased;
  /* [5] */
}

section {
  padding: 96px 12px;
}
section h2 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1.2;
}

main section:nth-child(even) {
  background-color: #e9f2f1;
}

/*------------------------------------*\
    #OBJECTS
\*------------------------------------*/
/*------------------------------------*\
    #BLOCK
\*------------------------------------*/
/**
 * The block object simply stacks an image on top of some text-like content.
 */
/**
 * Stacked image-with-text object. A simple abstraction to cover a very commonly
 * occurring design pattern.
 */
.block {
  display: block;
}

/**
 * 1. Eliminate whitespace around images.
 */
.block__img {
  vertical-align: middle;
  /* [1] */
  margin-bottom: 24px;
}

/**
 * Text-content.
 */
.block__body {
  display: block;
}

/*------------------------------------*\
    #BOX
\*------------------------------------*/
/**
 * The box object simply boxes off content.
 */
/**
 * 1. So we can apply the `.box` class to naturally-inline elements.
 */
.box {
  display: block;
  /* [1] */
  padding: 24px;
}
.box > :last-child {
  margin-bottom: 0;
}

/*------------------------------------*\
    #BUTTONS
\*------------------------------------*/
/**
 * A simple button object.
 */
/**
 * 1. Allow us to style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Make buttons inherit font styles (often necessary when styling `input`s as
 *    buttons).
 * 4. Reset/normalize some styles.
 * 5. Force all button-styled elements to appear clickable.
 * 6. Fixes odd inner spacing in IE7.
 * 7. Subtract the border size from the padding value so that buttons do not
 *    grow larger as we add borders.
 */
.btn {
  display: inline-block;
  /* [1] */
  vertical-align: middle;
  /* [2] */
  font: inherit;
  /* [3] */
  text-align: center;
  /* [4] */
  margin: 0;
  /* [4] */
  cursor: pointer;
  /* [5] */
  overflow: visible;
  /* [6] */
  padding: 11px 23px;
  /* [7] */
  background-color: #16A085;
  border: 1px solid #16A085;
}
.btn, .btn:hover, .btn:active, .btn:focus {
  text-decoration: none;
  /* [4] */
  color: #fff;
}

/**
 * Fix a Firefox bug whereby `input type="submit"` gains 2px extra padding.
 */
.btn::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Large buttons.
 */
.btn--large {
  padding: 23px 47px;
  /* [7] */
}

/*------------------------------------*\
    #FLAG
\*------------------------------------*/
/**
 * The flag object is a design pattern similar to the media object, however it
 * utilises `display: table[-cell];` to give us control over the vertical
 * alignments of the text and image. csswizardry.com/2013/05/the-flag-object
 */
/**
 * 1. Allows us to control vertical alignments
 * 2. Force the object to be the full width of its parent. Combined with [1],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.flag {
  display: table;
  /* [1] */
  width: 100%;
  /* [2] */
}

/**
 * Items within a flag object. There should only ever be one of each.
 *
 * 1. Default to aligning content to their middles.
 */
.flag__img,
.flag__body {
  display: table-cell;
  vertical-align: middle;
  /* [1] */
}

/**
 * Flag images have a space between them and the body of the object.
 */
.flag__img {
  padding-right: 24px;
}
.flag__img > img {
  display: block;
  max-width: none;
}

/**
 * The container for the main content of the flag object.
 *
 * 1. Forces the `.flag__body` to take up all remaining space.
 */
.flag__body {
  width: 100%;
  /* [1] */
}
.flag__body,
.flag__body > :last-child {
  margin-bottom: 0;
}

/*------------------------------------*\
    #LAYOUT
\*------------------------------------*/
/**
 * The inuitcss layout system uses `box-sizing: border-box;` and
 * `display: inline-block;` to create an extremely powerful, flexible
 * alternative to the traditional grid system. Combine the layout items with
 * the widths found in `trumps.widths`.
 */
/**
 * Begin a layout group.
 */
.o-layout {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -24px;
}

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
.o-layout__item {
  display: inline-block;
  /* [1] */
  padding-left: 24px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */
}

/**
 * Cause layout items to take up a non-explicit amount of width.
 */
.o-layout--auto > .o-layout__item {
  width: auto;
}

/*------------------------------------*\
    #LIST-BARE
\*------------------------------------*/
/**
 * The list-bare object simply removes any indents and bullet points from lists.
 */
.list-bare {
  margin: 0;
  padding: 0;
  list-style: none;
}

/*------------------------------------*\
    #LIST-BLOCK
\*------------------------------------*/
/**
 * The list-block object creates blocky list items out of a `ul` or `ol`.
 */
.list-block {
  margin: 0;
  padding: 0;
  list-style: none;
}

.list-block__item,
.list-block > li {
  padding: 24px;
}

/*------------------------------------*\
    #LIST-INLINE
\*------------------------------------*/
/**
 * The list-inline object simply displays a list of items in one line.
 */
.list-inline {
  margin: 0;
  padding: 0;
  list-style: none;
}
.list-inline > li {
  display: inline-block;
}

/*------------------------------------*\
    #LIST-UI
\*------------------------------------*/
/**
 * The UI list object creates blocky list items with a keyline separator out of
 * a `ul` or `ol`.
 */
.list-ui,
.list-ui__item,
.list-ui > li {
  border: 0 solid #e9f2f1;
}

.list-ui {
  margin: 0;
  padding: 0;
  list-style: none;
  border-top-width: 1px;
}

.list-ui__item,
.list-ui > li {
  padding: 24px;
  border-bottom-width: 1px;
}

/**
 * Small list-uis.
 */
.list-ui--small > .list-ui__item,
.list-ui.list-ui--small > li {
  padding: 12px;
}

/*------------------------------------*\
    #MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 */
.media {
  display: block;
}

.media__img {
  float: left;
  margin-right: 24px;
}
.media__img > img {
  display: block;
}

.media__body {
  overflow: hidden;
  display: block;
}
.media__body,
.media__body > :last-child {
  margin-bottom: 0;
}

/*------------------------------------*\
    #PACK
\*------------------------------------*/
/**
 * The pack object simply causes any number of elements pack up horizontally to
 * automatically fill an equal, fluid width of their parent.
 */
/**
 * 1. Fill all available space.
 * 2. Cause children to be automatically equally sized.
 */
.pack {
  width: 100%;
  /* [1] */
  display: table;
  table-layout: fixed;
  /* [2] */
}

/**
 * Cause children to adopt table-like structure.
 */
.pack__item {
  display: table-cell;
}

/*------------------------------------*\
    #TABLES
\*------------------------------------*/
.table {
  width: 100%;
}

/*------------------------------------*\
    #TABS
\*------------------------------------*/
/**
 * A simple abstraction for making equal-width navigation tabs.
 */
/**
 * 1. Reset any residual styles (most likely from lists).
 * 2. Tables for layout!
 * 3. Force all `table-cell` children to have equal widths.
 * 4. Force the object to be the full width of its parent. Combined with [2],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.tabs {
  margin: 0;
  /* [1] */
  padding: 0;
  /* [1] */
  list-style: none;
  /* [1] */
  display: table;
  /* [2] */
  table-layout: fixed;
  /* [3] */
  width: 100%;
  /* [4] */
  text-align: center;
}

.tabs__item {
  display: table-cell;
  /* [2] */
}

.tabs__link {
  display: block;
}

.o-wrapper {
  max-width: 75rem;
  margin: 0 auto;
}

/*------------------------------------*\
    $ICON-TEXT
\*------------------------------------*/
/**
 * For text-links etc that have an icon with them. Sometimes whitespace would
 * suffice in creating a gap between the icon and text, for example:
 *
   <a href=#>
       <i class="s  s--help"></i> Help &amp; support
   </a>
 *
 * However we will sometimes want a larger, explicity set gap:
   <a href=# class=icon-text>
       <i class="icon-text__icon  s  s--help"></i>Help &amp; support
   </a>
 *
 * Demo: jsfiddle.net/inuitcss/Q6Lbf
 *
 */
.icon-text > .icon-text__icon {
  margin-right: 4px;
  width: 12px;
  height: 12px;
  display: inline-block;
  background-repeat: no-repeat;
  vertical-align: middle;
}

/**
 * We can also reverse the direction of the margin for icons that appear to the
 * right of the text content, thus:
 *
   <a href=# class=icon-text--rev>
       Help &amp; support<i class="icon-text__icon  s  s--help"></i>
   </a>
 *
 */
.icon-text--rev > .icon-text__icon {
  margin-left: 6px;
}

.i-telephone {
  background-image: url("../img/i-telephone.png");
  background-image: url("../img/i-telephone.svg"), linear-gradient(transparent, transparent);
}

.i-mobile {
  background-image: url("../img/i-mobile.png");
  background-image: url("../img/i-mobile.svg"), linear-gradient(transparent, transparent);
}

.i-email {
  background-image: url("../img/i-email.png");
  background-image: url("../img/i-email.svg"), linear-gradient(transparent, transparent);
}

.i-flag {
  background-image: url("../img/i-flag.png");
  background-image: url("../img/i-flag.svg"), linear-gradient(transparent, transparent);
}

.i-menu {
  background-image: url("../img/i-menu.png");
  background-image: url("../img/i-menu.svg"), linear-gradient(transparent, transparent);
}

.i-menu-close {
  background-image: url("../img/i-menu-close.png");
  background-image: url("../img/i-menu-close.svg"), linear-gradient(transparent, transparent);
}

.i-pin {
  background-image: url("../img/i-pin.png");
  background-image: url("../img/i-pin.svg"), linear-gradient(transparent, transparent);
}

.i-skype {
  background-image: url("../img/i-skype.png");
  background-image: url("../img/i-skype.svg"), linear-gradient(transparent, transparent);
}

/*------------------------------------*\
    #COMPONENTS
\*------------------------------------*/
.alpha {
  font-family: 'Roboto Slab', serif;
  font-weight: 400;
}

.hero-line {
  display: inline-block;
  margin-bottom: 24px;
}
.hero-line::after {
  content: '';
  display: block;
  margin-top: 12px;
  border: 1px solid #fff;
  width: 72px;
}

header {
  background: url("../img/header-bg.png") no-repeat;
  background-size: cover;
  color: #fff;
}
header li {
  padding: 12px;
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
}
header > section {
  background: none;
}

.en:lang(es), .es:lang(en) {
  text-transform: uppercase;
}

.c-contact-info {
  position: relative;
  z-index: 1000;
  background-color: #e9f2f1;
}
.c-contact-info li {
  padding: 12px;
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
  text-align: center;
}

@media screen and (min-width: 36.875em) {
  .c-lang {
    float: right;
  }
}

.c-navigation {
  text-align: center;
  width: 100%;
  background: #fff;
}
.c-navigation img {
  transition: height 0.3s ease-out;
}
.c-navigation span {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
}
.c-navigation.is-sticky {
  position: fixed;
  top: 0;
  left: 0;
  box-shadow: 0px 1px 9px 0px rgba(0, 0, 0, 0.1);
  background: #fff;
  z-index: 10;
}
.c-navigation.is-sticky a {
  color: #39403e;
}
.c-navigation.is-sticky a:hover {
  color: #16A085;
}
.c-navigation .c-navigation__item {
  background: #fff;
}
@media screen and (min-width: 46.375em) {
  .c-navigation .c-navigation__item {
    background: none;
  }
}
.c-navigation .c-navigation__item.c-nav-header {
  position: relative;
  z-index: 1000;
}

.logo, .menu-toggle {
  display: inline-block;
  color: #39403e;
  margin-bottom: 0;
}

.logo {
  text-align: left;
  padding-left: 12px;
}

.menu-toggle {
  background: none;
  border: none;
  outline: none;
  text-align: right;
  padding-right: 12px;
}
.menu-toggle span {
  margin: -4px 0 0 4px;
}
@media screen and (min-width: 46.375em) {
  .menu-toggle {
    display: none;
  }
}

.nav-mobile {
  width: 100%;
  position: absolute;
  z-index: 100;
  box-shadow: 0px 1px 9px 0px rgba(0, 0, 0, 0.1);
  will-change: transform;
  -webkit-transform: translateY(-200px);
      -ms-transform: translateY(-200px);
          transform: translateY(-200px);
  transition: -webkit-transform 0.5s ease;
  transition: transform 0.5s ease;
  transition: transform 0.5s ease, -webkit-transform 0.5s ease;
}
@media screen and (min-width: 46.375em) {
  .nav-mobile {
    display: none;
  }
}

.nav-desk {
  display: none;
  text-align: right;
}
@media screen and (min-width: 46.375em) {
  .nav-desk {
    display: inline-block;
  }
}
.nav-desk a {
  color: #000;
}
.nav-desk a:hover {
  color: #16A085;
}

.c-card {
  padding: 24px;
  border-radius: 4px;
  background: #fff;
  border: 1px solid #DFE0E1;
  display: inline-block;
}
.c-card .c-card__title {
  font-weight: 400;
  margin-bottom: 12px;
}
.c-card .c-card__body {
  margin-bottom: 0;
}
@media screen and (max-width: 63.9375em) {
  .c-card {
    margin-bottom: 24px;
  }
}

.c-card--arrowed {
  position: relative;
}
.c-card--arrowed::before, .c-card--arrowed::after {
  content: "";
  position: absolute;
  border-collapse: separate;
  border: 24px solid transparent;
  border-left-color: #16A085;
  left: 100%;
  top: 50%;
  margin-top: -24px;
}
@media screen and (max-width: 63.9375em) {
  .c-card--arrowed::before, .c-card--arrowed::after {
    border-left-color: transparent;
    border-top-color: #16A085;
    margin-top: 0;
    top: 100%;
    left: 50%;
    margin-left: -24px;
  }
}

.c-card--big {
  min-height: 336px;
}
@media screen and (max-width: 63.9375em) {
  .c-card--big {
    min-height: initial;
  }
}
.c-card--big .c-card__title::after {
  content: '';
  display: block;
  width: 24px;
  margin-top: 6px;
  border: 1px solid #39403e;
}

.c-card--small {
  border: 1px solid #dfe0e1;
  min-height: initial;
  padding: 12px;
  text-align: center;
  margin: 6px;
  cursor: default;
  transition: all 0.2s ease-in;
  will-change: auto;
}
.c-card--small:hover {
  color: #16A085;
  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
}
.c-card--small .c-card__title {
  margin-bottom: 0;
}
@media screen and (max-width: 36.875em) {
  .c-card--small {
    width: 100%;
    margin: 6px 0;
  }
}

label, input, textarea {
  display: block;
  width: 100%;
}

label {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
}

input, textarea {
  border: 1px solid #c9dfdd;
  border-radius: 2px;
  padding: 6px;
  margin-bottom: 12px;
}

.c-map {
  width: 100%;
  height: 500px;
  background: #e9f2f1;
  display: none;
}
@media screen and (min-width: 64em) {
  .c-map {
    display: block;
  }
}

footer {
  text-align: center;
  background: #16A085;
  color: #fff;
}

.footer-nav {
  padding: 24px;
}
.footer-nav li {
  padding: 12px;
}
.footer-nav a {
  color: #fff;
}

.js nav {
  /*display: none;*/
}

.nav-is-displayed {
  -webkit-transform: translateY(0);
      -ms-transform: translateY(0);
          transform: translateY(0);
}

/*------------------------------------*\
    #THEME
\*------------------------------------*/
/*------------------------------------*\
    #TESTS
\*------------------------------------*/
/*------------------------------------*\
    #TRUMPS
\*------------------------------------*/
/*------------------------------------*\
    #CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.clearfix` class appearing
 * over and over in your markup.
 */
.clearfix:after,
.box:after,
.media:after {
  content: "";
  display: table;
  clear: both;
}

/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/
/**
 * Headings 1–6’s corresponding Greek-alphabet abstract classes for double-
 * stranded heading hierarchy: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * Use these helper classes to cause other elements to adopt the styling of the
 * respective heading, e.g.:
 *
   <h2 class="alpha">Lorem ipsum</h2>
 *
 */
.alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333;
}

.beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6;
}

.gamma {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1;
}

.delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2;
}

.epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
}

.zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
}

/*------------------------------------*\
    #PRINT
\*------------------------------------*/
/**
 * Very crude, reset-like styles taken from the HTML5 Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/3c3c5e64604209a4d63e1e4c48dd245d45fadfd9/css/main.css#L200-L234
 */
@media print {
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000 !important;
    /* Black prints faster: h5bp.com/s */
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a,
  a:visited {
    text-decoration: underline;
  }

  a[href]:after {
    content: " (" attr(href) ")";
  }

  abbr[title]:after {
    content: " (" attr(title) ")";
  }

  /**
   * Don’t show links that are fragment identifiers, or use the `javascript:`
   * pseudo protocol.
   */
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: "";
  }
}
/*------------------------------------*\
    #SPACING
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.(m|p)(t|r|b|l|h|v)(-|+|0) {}` = margin/padding top/right/bottom/left/horizontal/vertical less/more/none
 */
/*------------------------------------*\
    #SPACING-RESPONSIVE
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.(m|p)(t|r|b|l|h|v)(-|+|0) {}` = margin/padding top/right/bottom/left/horizontal/vertical less/more/none
 */
/*------------------------------------*\
    #WIDTHS
\*------------------------------------*/
/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes can take a fraction-like format (e.g. `.u-2/3`) or a spoken-
 * word format (e.g. `.u-2-of-3`). Use these in your markup:
 *
 * <div class="u-7/12">
 */
.u-1\/1 {
  width: 100% !important;
}

.u-1\/2 {
  width: 50% !important;
}

.u-1\/3 {
  width: 33.33333% !important;
}

.u-2\/3 {
  width: 66.66667% !important;
}

.u-1\/4 {
  width: 25% !important;
}

.u-2\/4 {
  width: 50% !important;
}

.u-3\/4 {
  width: 75% !important;
}

.u-1\/5 {
  width: 20% !important;
}

.u-2\/5 {
  width: 40% !important;
}

.u-3\/5 {
  width: 60% !important;
}

.u-4\/5 {
  width: 80% !important;
}

.u-1\/6 {
  width: 16.66667% !important;
}

.u-2\/6 {
  width: 33.33333% !important;
}

.u-3\/6 {
  width: 50% !important;
}

.u-4\/6 {
  width: 66.66667% !important;
}

.u-5\/6 {
  width: 83.33333% !important;
}

/*------------------------------------*\
    #WIDTHS-RESPONSIVE
\*------------------------------------*/
/**
 * Responsive width classes based on your responsive settings.
 */
@media screen and (max-width: 26.5625em) {
  .u-1\/1-palm {
    width: 100% !important;
  }

  .u-1\/2-palm {
    width: 50% !important;
  }

  .u-1\/3-palm {
    width: 33.33333% !important;
  }

  .u-2\/3-palm {
    width: 66.66667% !important;
  }

  .u-1\/4-palm {
    width: 25% !important;
  }

  .u-2\/4-palm {
    width: 50% !important;
  }

  .u-3\/4-palm {
    width: 75% !important;
  }

  .u-1\/5-palm {
    width: 20% !important;
  }

  .u-2\/5-palm {
    width: 40% !important;
  }

  .u-3\/5-palm {
    width: 60% !important;
  }

  .u-4\/5-palm {
    width: 80% !important;
  }
}
@media screen and (min-width: 23.4375em) and (max-width: 29.8125em) {
  .u-1\/1-palm--large {
    width: 100% !important;
  }

  .u-1\/2-palm--large {
    width: 50% !important;
  }

  .u-1\/3-palm--large {
    width: 33.33333% !important;
  }

  .u-2\/3-palm--large {
    width: 66.66667% !important;
  }

  .u-1\/4-palm--large {
    width: 25% !important;
  }

  .u-2\/4-palm--large {
    width: 50% !important;
  }

  .u-3\/4-palm--large {
    width: 75% !important;
  }

  .u-1\/5-palm--large {
    width: 20% !important;
  }

  .u-2\/5-palm--large {
    width: 40% !important;
  }

  .u-3\/5-palm--large {
    width: 60% !important;
  }

  .u-4\/5-palm--large {
    width: 80% !important;
  }
}
@media screen and (min-width: 29.875em) and (max-width: 36.875em) {
  .u-1\/1-palm--huge {
    width: 100% !important;
  }

  .u-1\/2-palm--huge {
    width: 50% !important;
  }

  .u-1\/3-palm--huge {
    width: 33.33333% !important;
  }

  .u-2\/3-palm--huge {
    width: 66.66667% !important;
  }

  .u-1\/4-palm--huge {
    width: 25% !important;
  }

  .u-2\/4-palm--huge {
    width: 50% !important;
  }

  .u-3\/4-palm--huge {
    width: 75% !important;
  }

  .u-1\/5-palm--huge {
    width: 20% !important;
  }

  .u-2\/5-palm--huge {
    width: 40% !important;
  }

  .u-3\/5-palm--huge {
    width: 60% !important;
  }

  .u-4\/5-palm--huge {
    width: 80% !important;
  }
}
@media screen and (max-width: 36.875em) {
  .u-1\/1-handheld {
    width: 100% !important;
  }

  .u-1\/2-handheld {
    width: 50% !important;
  }

  .u-1\/3-handheld {
    width: 33.33333% !important;
  }

  .u-2\/3-handheld {
    width: 66.66667% !important;
  }

  .u-1\/4-handheld {
    width: 25% !important;
  }

  .u-2\/4-handheld {
    width: 50% !important;
  }

  .u-3\/4-handheld {
    width: 75% !important;
  }

  .u-1\/5-handheld {
    width: 20% !important;
  }

  .u-2\/5-handheld {
    width: 40% !important;
  }

  .u-3\/5-handheld {
    width: 60% !important;
  }

  .u-4\/5-handheld {
    width: 80% !important;
  }
}
@media screen and (min-width: 36.875em) {
  .u-1\/1-handheld-and-up {
    width: 100% !important;
  }

  .u-1\/2-handheld-and-up {
    width: 50% !important;
  }

  .u-1\/3-handheld-and-up {
    width: 33.33333% !important;
  }

  .u-2\/3-handheld-and-up {
    width: 66.66667% !important;
  }

  .u-1\/4-handheld-and-up {
    width: 25% !important;
  }

  .u-2\/4-handheld-and-up {
    width: 50% !important;
  }

  .u-3\/4-handheld-and-up {
    width: 75% !important;
  }

  .u-1\/5-handheld-and-up {
    width: 20% !important;
  }

  .u-2\/5-handheld-and-up {
    width: 40% !important;
  }

  .u-3\/5-handheld-and-up {
    width: 60% !important;
  }

  .u-4\/5-handheld-and-up {
    width: 80% !important;
  }
}
@media screen and (min-width: 36.875em) and (max-width: 55.5625em) {
  .u-1\/1-handheld--large {
    width: 100% !important;
  }

  .u-1\/2-handheld--large {
    width: 50% !important;
  }

  .u-1\/3-handheld--large {
    width: 33.33333% !important;
  }

  .u-2\/3-handheld--large {
    width: 66.66667% !important;
  }

  .u-1\/4-handheld--large {
    width: 25% !important;
  }

  .u-2\/4-handheld--large {
    width: 50% !important;
  }

  .u-3\/4-handheld--large {
    width: 75% !important;
  }

  .u-1\/5-handheld--large {
    width: 20% !important;
  }

  .u-2\/5-handheld--large {
    width: 40% !important;
  }

  .u-3\/5-handheld--large {
    width: 60% !important;
  }

  .u-4\/5-handheld--large {
    width: 80% !important;
  }
}
@media screen and (max-width: 55.5625em) {
  .u-1\/1-up-to-handheld--large {
    width: 100% !important;
  }

  .u-1\/2-up-to-handheld--large {
    width: 50% !important;
  }

  .u-1\/3-up-to-handheld--large {
    width: 33.33333% !important;
  }

  .u-2\/3-up-to-handheld--large {
    width: 66.66667% !important;
  }

  .u-1\/4-up-to-handheld--large {
    width: 25% !important;
  }

  .u-2\/4-up-to-handheld--large {
    width: 50% !important;
  }

  .u-3\/4-up-to-handheld--large {
    width: 75% !important;
  }

  .u-1\/5-up-to-handheld--large {
    width: 20% !important;
  }

  .u-2\/5-up-to-handheld--large {
    width: 40% !important;
  }

  .u-3\/5-up-to-handheld--large {
    width: 60% !important;
  }

  .u-4\/5-up-to-handheld--large {
    width: 80% !important;
  }
}
@media screen and (min-width: 45em) and (max-width: 63.9375em) {
  .u-1\/1-lap {
    width: 100% !important;
  }

  .u-1\/2-lap {
    width: 50% !important;
  }

  .u-1\/3-lap {
    width: 33.33333% !important;
  }

  .u-2\/3-lap {
    width: 66.66667% !important;
  }

  .u-1\/4-lap {
    width: 25% !important;
  }

  .u-2\/4-lap {
    width: 50% !important;
  }

  .u-3\/4-lap {
    width: 75% !important;
  }

  .u-1\/5-lap {
    width: 20% !important;
  }

  .u-2\/5-lap {
    width: 40% !important;
  }

  .u-3\/5-lap {
    width: 60% !important;
  }

  .u-4\/5-lap {
    width: 80% !important;
  }
}
@media screen and (min-width: 45em) {
  .u-1\/1-lap-and-up {
    width: 100% !important;
  }

  .u-1\/2-lap-and-up {
    width: 50% !important;
  }

  .u-1\/3-lap-and-up {
    width: 33.33333% !important;
  }

  .u-2\/3-lap-and-up {
    width: 66.66667% !important;
  }

  .u-1\/4-lap-and-up {
    width: 25% !important;
  }

  .u-2\/4-lap-and-up {
    width: 50% !important;
  }

  .u-3\/4-lap-and-up {
    width: 75% !important;
  }

  .u-1\/5-lap-and-up {
    width: 20% !important;
  }

  .u-2\/5-lap-and-up {
    width: 40% !important;
  }

  .u-3\/5-lap-and-up {
    width: 60% !important;
  }

  .u-4\/5-lap-and-up {
    width: 80% !important;
  }
}
@media screen and (min-width: 46.375em) {
  .u-1\/1-lap-and-up--alt {
    width: 100% !important;
  }

  .u-1\/2-lap-and-up--alt {
    width: 50% !important;
  }

  .u-1\/3-lap-and-up--alt {
    width: 33.33333% !important;
  }

  .u-2\/3-lap-and-up--alt {
    width: 66.66667% !important;
  }

  .u-1\/4-lap-and-up--alt {
    width: 25% !important;
  }

  .u-2\/4-lap-and-up--alt {
    width: 50% !important;
  }

  .u-3\/4-lap-and-up--alt {
    width: 75% !important;
  }

  .u-1\/5-lap-and-up--alt {
    width: 20% !important;
  }

  .u-2\/5-lap-and-up--alt {
    width: 40% !important;
  }

  .u-3\/5-lap-and-up--alt {
    width: 60% !important;
  }

  .u-4\/5-lap-and-up--alt {
    width: 80% !important;
  }
}
@media screen and (max-width: 63.9375em) {
  .u-1\/1-portable {
    width: 100% !important;
  }

  .u-1\/2-portable {
    width: 50% !important;
  }

  .u-1\/3-portable {
    width: 33.33333% !important;
  }

  .u-2\/3-portable {
    width: 66.66667% !important;
  }

  .u-1\/4-portable {
    width: 25% !important;
  }

  .u-2\/4-portable {
    width: 50% !important;
  }

  .u-3\/4-portable {
    width: 75% !important;
  }

  .u-1\/5-portable {
    width: 20% !important;
  }

  .u-2\/5-portable {
    width: 40% !important;
  }

  .u-3\/5-portable {
    width: 60% !important;
  }

  .u-4\/5-portable {
    width: 80% !important;
  }
}
@media screen and (min-width: 64em) {
  .u-1\/1-desk {
    width: 100% !important;
  }

  .u-1\/2-desk {
    width: 50% !important;
  }

  .u-1\/3-desk {
    width: 33.33333% !important;
  }

  .u-2\/3-desk {
    width: 66.66667% !important;
  }

  .u-1\/4-desk {
    width: 25% !important;
  }

  .u-2\/4-desk {
    width: 50% !important;
  }

  .u-3\/4-desk {
    width: 75% !important;
  }

  .u-1\/5-desk {
    width: 20% !important;
  }

  .u-2\/5-desk {
    width: 40% !important;
  }

  .u-3\/5-desk {
    width: 60% !important;
  }

  .u-4\/5-desk {
    width: 80% !important;
  }
}
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
  .u-1\/1-retina {
    width: 100% !important;
  }

  .u-1\/2-retina {
    width: 50% !important;
  }

  .u-1\/3-retina {
    width: 33.33333% !important;
  }

  .u-2\/3-retina {
    width: 66.66667% !important;
  }

  .u-1\/4-retina {
    width: 25% !important;
  }

  .u-2\/4-retina {
    width: 50% !important;
  }

  .u-3\/4-retina {
    width: 75% !important;
  }

  .u-1\/5-retina {
    width: 20% !important;
  }

  .u-2\/5-retina {
    width: 40% !important;
  }

  .u-3\/5-retina {
    width: 60% !important;
  }

  .u-4\/5-retina {
    width: 80% !important;
  }
}
.text--left {
  text-align: left !important;
}

.text--center {
  text-align: center !important;
}

.text--right {
  text-align: right !important;
}



/*# sourceMappingURL=main.css.map */
